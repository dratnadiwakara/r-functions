---
title: "acs-county-level-data"
format: html
editor: source
---


```{r}
rm(list=ls())
library(data.table)
library(stringr)
library(tidycensus)
library(dplyr)
```


```{r}
census_api_key("c8809455cbebf7aa64ff3f98b394c8f25fdf8846", install = TRUE)
```
```{r}
# Load variable definitions for the 2020 ACS 5-year estimates
variables_2020 <- load_variables(2020, "acs5", cache = TRUE)

# View the first few rows
variables_2020 <- data.table(variables_2020)

```

```{r}
tract_zip_crosswalk <- fread('D:/OneDrive/research-data/Crosswalk Files/ZIP_TRACT.csv')
tract_zip_crosswalk[,ZIP:=str_pad(ZIP,5,"left","0")]
tract_zip_crosswalk[,TRACT:=as.character(TRACT)]
tract_zip_crosswalk[,TRACT:=str_pad(TRACT,11,"left","0")]
```

```{r}
library(tidycensus)
library(dplyr)
library(tidyr)

# Set your Census API key
# census_api_key("your_api_key")

# List of state abbreviations
states <- c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", 
            "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", 
            "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", 
            "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", 
            "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY")

# Variables to retrieve
acs_vars <- c(
  median_income = "B19013_001",          # Median household income
  pct_college_educated = "B23006_023",   # Bachelor's degree (age 25+)
  total_education = "B23006_001",# Total population 25+
  median_age = "B01002_001",             # Median age
  white_population = "B02001_002",       # White alone population
  total_population = "B01003_001"        # Total population
)

# Initialize an empty list to hold the data for each state
all_states_data <- list()

# Loop through each state to get ACS data at the tract level
for(yr in 2010:2022) {
  for (state in states) {
    state_yr <-paste(state,yr)
    message("Getting data for state: ", state_yr)
    
    # Get the ACS data for the state at the tract level
    state_data <- get_acs(
      geography = "tract",
      variables = acs_vars,
      state = state,
      year = yr,
      survey = "acs5",
      output = "wide"
    )
    
    state_data <- data.table(state_data)
    state_data[,yr:=yr]
    
    # Store the data for the state
    all_states_data[[state_yr]] <- state_data
  }
}

# Combine all the state data into a single data frame
acs_data_combined <- bind_rows(all_states_data)

acs_data <- acs_data_combined %>%
  mutate(
    pct_college_educated = 100 * (pct_college_educatedE / total_educationE),  # Bachelor's degree holders as a percentage of 25+ population
    white_population_pct = 100 * (white_populationE / total_populationE),   # White population as a percentage of total population
    median_income = median_incomeE,
    median_age = median_ageE
  ) %>%
  select(GEOID, median_income, pct_college_educated, median_age, white_population_pct) %>%
  rename(
    tract = GEOID
  )

# Load your tract-to-ZIP crosswalk
# Assuming it is called `tract_zip_crosswalk` with columns: GEOID (tract) and ZIP
```





```{r}
library(RSQLite)
library(DBI)

yrs <- as.character(2020:2021)
hmda <- list()
i=1
for(yr in yrs) {
  print(yr)
  hmda_con <- dbConnect(RSQLite::SQLite(), paste0("D:/OneDrive/research-data/HMDA/db/depositor_chars_",yr,"_lar.db"))
  hmda[[i]] <- data.table(dbGetQuery(hmda_con,
                                     paste0("select
                                                activity_year asofdate,
                                                loan_purpose purposeofloan,
                                                census_tract censustract
                                            from tb_",yr,"_lar where 
                                            occupancy_type=1 and action_taken=1")))
  i=i+1
  dbDisconnect(hmda_con)
}
hmda <- rbindlist(hmda)
hmda <- data.table(hmda)
gc()

hmda[,refinance:=ifelse(purposeofloan==1,0,1)]

hmda_summary <- hmda[,.(no_refinance=sum(refinance),no_loans=.N),by=censustract]

new_hmda_summary = copy(hmda_summary)
new_hmda_summary[,censustract:=paste0(substr(censustract,1,10),'0')]
new_hmda_summary <- new_hmda_summary[, lapply(.SD, sum), by = censustract, .SDcols = -"censustract"]
new_hmda_summary <- new_hmda_summary[!censustract %in% hmda_summary$censustract]

hmda_summary <- rbind(hmda_summary,new_hmda_summary)

acs_block_data_file <- paste0("D:/OneDrive/research-data/Dewey/acs_tract_data_2.csv.gz")

asc_block_data <- fread(acs_block_data_file, header = TRUE)

asc_block_data[, `:=`(
  state = str_pad(state,width = 2,side = "left",pad = "0"),
  county =str_pad(county,width = 3,side = "left",pad = "0"),
  tract =str_pad(tract,width = 6,side = "left",pad = "0")
)]

# Replace negative values with NaN in specific columns
cols_to_replace <- c(
  "median_age",
  "median_income_last_12_months",
  "aggregate_family_income"
)

asc_block_data[, (cols_to_replace) := lapply(.SD, function(x) ifelse(x < 0, NA, x)), .SDcols = cols_to_replace]

# Create the 'censustract' column
asc_block_data[, censustract := paste0(state, county, tract)]

# Calculate additional columns
asc_block_data[, mean_family_income := aggregate_family_income / no_of_households]
asc_block_data[, white_fraction := population_race_white / population_race_base]
asc_block_data[, english_speaking_frac := households_language_english / households_language_base]
asc_block_data[, spanish_speaking_frac := households_language_spanish / households_language_base]
asc_block_data[, internet_frac := households_internet_yes / households_internet_base]
asc_block_data[, computer_frac := households_computer_yes / households_computer_base]
asc_block_data[, under_19_frac := population_by_age_base_under_19 / population_by_age_base]
asc_block_data[, over_65_frac := population_by_age_base_65_older / population_by_age_base]
asc_block_data[, below_poverty_frac := poverty_status_below / poverty_status_base]
asc_block_data[, food_stamp_frac := received_food_stamps_snap_yes / received_food_stamps_snap_base]
asc_block_data[, owner_occ_frac := housing_units_occupancy_own / housing_units_occupancy_base]
asc_block_data[, home_with_mtg_frac := housing_units_with_a_mortgage / housing_units_mortgage_base]
asc_block_data[, college_or_higher_frac := education_college_or_higher / education_base]
asc_block_data[, less_than_high_school_frac := education_less_than_high_school / education_base]

# Select desired columns
selected_columns <- c(
  'censustract',
  'median_age',
  'median_income_last_12_months',
  'mean_family_income',
  'white_fraction',
  'travel_time_to_work',
  'spanish_speaking_frac',
  'english_speaking_frac',
  'internet_frac',
  'computer_frac',
  'under_19_frac',
  'over_65_frac',
  'below_poverty_frac',
  'food_stamp_frac',
  'owner_occ_frac',
  'college_or_higher_frac',
  'less_than_high_school_frac'
)

acs_housing_units <- asc_block_data[,c("housing_units_with_a_mortgage","censustract")]
acs_housing_units <- acs_housing_units[,.(housing_units_with_a_mortgage=sum(housing_units_with_a_mortgage,na.rm=T)),by=censustract]

new_acs_housing_units <- copy(acs_housing_units)
new_acs_housing_units[,censustract:=paste0(substr(censustract,1,10),'0')]
new_acs_housing_units <- new_acs_housing_units[,.(housing_units_with_a_mortgage=sum(housing_units_with_a_mortgage,na.rm=T)),by=censustract]
new_acs_housing_units <- new_acs_housing_units[!censustract %in% acs_housing_units$censustract]
acs_housing_units <- rbind(acs_housing_units,new_acs_housing_units)

acs <- asc_block_data[, ..selected_columns]

new_acs = copy(acs)
new_acs[,censustract:=paste0(substr(censustract,1,10),'0')]
new_acs <- new_acs[, lapply(.SD, mean), by = censustract, .SDcols = -"censustract"]
new_acs <- new_acs[!censustract %in% acs$censustract]

acs <- rbind(acs,new_acs)
acs[, (names(acs)) := lapply(.SD, function(x) replace(x, is.infinite(x), NA)), .SDcols = names(acs)]
acs <- merge(acs,acs_housing_units,by="censustract")

acs <- merge(acs,hmda_summary,by="censustract",all.x=T)
acs[,refinance_rate:=no_refinance/housing_units_with_a_mortgage]
acs[,refinance_rate:=ifelse(is.finite(refinance_rate) & refinance_rate<1,refinance_rate,NA)]

acs <- acs[,c("censustract","refinance_rate")]

acs_data_combined <- merge(acs_data_combined,acs,by.x="GEOID",by.y="censustract")
```


```{r}
# Merge ACS data with the crosswalk
acs_with_zip <- acs_data_combined %>%
  left_join(tract_zip_crosswalk[,c("ZIP","TRACT","RES_RATIO")], by = c("GEOID" = "TRACT"))

# Perform weighted aggregation at the ZIP code level using RES_RATIO
zip_aggregated_data <- acs_with_zip %>%
  group_by(ZIP) %>%
  summarize(
    # Weighted average of median income
    median_income = sum(median_incomeE * RES_RATIO, na.rm = T) ,
    
    # Weighted average of percentage of population with a bachelor's degree
    pct_college_educated = sum(pct_college_educatedE * RES_RATIO, na.rm=T),
    
    # Weighted average of white population percentage
    white_population_pct = sum(white_populationE * RES_RATIO,na.rm=T),
    
    # Weighted average of median age
    median_age = sum(median_ageE * RES_RATIO,na.rm = T) ,
    
    # Total population is weighted by RES_RATIO
    total_population = sum(total_populationE * RES_RATIO),
    
    refinance_rate = sum(refinance_rate*RES_RATIO)
  )

# View the aggregated ZIP code-level data
head(zip_aggregated_data)

```

```{r}
irs <-fread(paste0("D:/OneDrive/research-data/Dewey/19zpallagi.csv"),select = c("zipcode","N1","N00200","N00600","N00900","N01000"))  #no_returns,no_returns_salaries,no_returns_dividend,no_returns_business,no_returns_captial_gain
setnames(irs,
         c("N1","N00200","N00600","N00900","N01000"),
         c("no_returns","no_returns_salaries","no_returns_dividend","no_returns_business","no_returns_captial_gain"))

irs <- irs[, lapply(.SD, function(x) sum(x, na.rm = TRUE)), by = zipcode]


irs[,salary_frac:=no_returns_salaries/no_returns]
irs[,dividend_frac:=no_returns_dividend/no_returns]
irs[,business_frac:=no_returns_business/no_returns]
irs[,capital_gain_frac:=no_returns_captial_gain/no_returns]

irs <- irs[,c("zipcode","salary_frac","dividend_frac","business_frac","capital_gain_frac")]
```

```{r}
zip_aggregated_data <- merge(zip_aggregated_data,irs,by.x="ZIP",by.y="zipcode",all.x=T)
```

```{r}
saveRDS(zip_aggregated_data,"C:/Users/dimut/Downloads/zip_demographics.rds")
```

